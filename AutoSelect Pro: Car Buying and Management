import pandas as pd

# Class representing a single car
class Car:
    def __init__(self, model, price, fuel_efficiency, brand, horsepower, safety_rating, color):
        self.model = model
        self.price = price
        self.fuel_efficiency = fuel_efficiency
        self.brand = brand
        self.horsepower = horsepower
        self.safety_rating = safety_rating
        self.color = color
        self.is_sold = False  # Track if the car is sold

    def __repr__(self):
        status = "Sold" if self.is_sold else "Available"
        return f"{self.model} ({self.brand}): ${self.price}, {self.fuel_efficiency} MPG, {self.horsepower} HP, Safety: {self.safety_rating} Stars, Color: {self.color}, Status: {status}"


# Class representing the car shop with available cars
class CarShop:
    def __init__(self):
        self.cars = []
        self.add_initial_cars()  # Add some initial cars to the inventory

    def add_car(self, car):
        self.cars.append(car)

    def add_initial_cars(self):
        # Add some initial cars to the inventory
        self.add_car(Car('Honda Civic', 22000, 30, 'Honda', 158, 4.5, 'Red'))
        self.add_car(Car('Toyota Corolla', 21000, 32, 'Toyota', 139, 4.7, 'Blue'))
        self.add_car(Car('BMW 3 Series', 35000, 25, 'BMW', 255, 4.2, 'Black'))
        self.add_car(Car('Ford Focus', 20000, 28, 'Ford', 160, 4.3, 'White'))
        self.add_car(Car('Chevrolet Malibu', 23000, 26, 'Chevrolet', 160, 4.4, 'Silver'))
        self.add_car(Car('Tesla Model 3', 45000, 130, 'Tesla', 283, 5.0, 'Midnight Silver'))
        self.add_car(Car('Audi A4', 40000, 27, 'Audi', 248, 4.8, 'Gray'))
        self.add_car(Car('Hyundai Elantra', 19000, 33, 'Hyundai', 147, 4.6, 'Blue'))
        self.add_car(Car('Kia Sportage', 26000, 28, 'Kia', 181, 4.5, 'White'))
        self.add_car(Car('Subaru Outback', 30000, 29, 'Subaru', 182, 4.7, 'Green'))

    def get_available_cars(self):
        return [car for car in self.cars if not car.is_sold]

    def save_cars_to_csv(self, filename="car_inventory.csv"):
        car_data = {
            "Model": [car.model for car in self.cars],
            "Price": [car.price for car in self.cars],
            "Fuel Efficiency": [car.fuel_efficiency for car in self.cars],
            "Brand": [car.brand for car in self.cars],
            "Horsepower": [car.horsepower for car in self.cars],
            "Safety Rating": [car.safety_rating for car in self.cars],
            "Color": [car.color for car in self.cars],
            "Status": ["Sold" if car.is_sold else "Available" for car in self.cars],
        }
        df = pd.DataFrame(car_data)
        df.to_csv(filename, index=False)
        print(f"Car inventory saved to {filename}.")

    def load_cars_from_csv(self, filename="car_inventory.csv"):
        try:
            df = pd.read_csv(filename)
            for _, row in df.iterrows():
                car = Car(
                    row["Model"],
                    row["Price"],
                    row["Fuel Efficiency"],
                    row["Brand"],
                    row["Horsepower"],
                    row["Safety Rating"],
                    row["Color"],
                )
                car.is_sold = row["Status"] == "Sold"
                self.cars.append(car)
            print(f"Car inventory loaded from {filename}.")
        except FileNotFoundError:
            print("Inventory file not found. Starting with default inventory.")

    def mark_car_as_sold(self, model):
        for car in self.cars:
            if car.model.lower() == model.lower() and not car.is_sold:
                car.is_sold = True
                return f"{car.model} has been marked as sold."
        return f"Car '{model}' is not available or already sold."


# Class representing a car buyer
class CarBuyer:
    def __init__(self, name, budget, min_fuel_efficiency, brand_preference, min_safety_rating):
        self.name = name
        self.budget = budget
        self.min_fuel_efficiency = min_fuel_efficiency
        self.brand_preference = brand_preference
        self.min_safety_rating = min_safety_rating

    def filter_cars(self, cars):
        matching_cars = [
            car for car in cars
            if car.price <= self.budget
            and car.fuel_efficiency >= self.min_fuel_efficiency
            and (self.brand_preference.lower() in car.brand.lower() or self.brand_preference == "")
            and car.safety_rating >= self.min_safety_rating
            and not car.is_sold
        ]
        return matching_cars

    def recommend_car(self, car_shop):
        available_cars = car_shop.get_available_cars()
        filtered_cars = self.filter_cars(available_cars)

        if not filtered_cars:
            print(f"Sorry, {self.name}, no cars match your criteria.")
        else:
            print(f"\nHi {self.name}, here are the cars that fit your preferences:")
            for car in filtered_cars:
                print(car)


# Main program
def main():
    car_shop = CarShop()
    car_shop.load_cars_from_csv()  # Load existing inventory (if available)

    while True:
        print("\n=== AutoSelect Pro ===")
        print("1. View Available Cars")
        print("2. Add a New Car to Inventory")
        print("3. Save Car Inventory to CSV")
        print("4. Buy a Car")
        print("5. Exit")
        choice = input("Enter your choice: ")

        if choice == "1":
            print("\nAvailable Cars:")
            for car in car_shop.get_available_cars():
                print(car)

        elif choice == "2":
            print("\nAdd a New Car:")
            model = input("Enter model: ")
            price = float(input("Enter price (USD): $"))
            fuel_efficiency = float(input("Enter fuel efficiency (MPG): "))
            brand = input("Enter brand: ")
            horsepower = int(input("Enter horsepower: "))
            safety_rating = float(input("Enter safety rating (out of 5): "))
            color = input("Enter color: ")
            car_shop.add_car(Car(model, price, fuel_efficiency, brand, horsepower, safety_rating, color))
            print(f"{model} has been added to the inventory.")

        elif choice == "3":
            car_shop.save_cars_to_csv()
            print("Inventory saved successfully.")

        elif choice == "4":
            print("\nWelcome to AutoSelect Pro! Let's find your perfect car.")
            name = input("Enter your name: ")
            budget = float(input("Enter your maximum budget (USD): $"))
            min_fuel_efficiency = float(input("Enter minimum fuel efficiency (MPG): "))
            brand_preference = input("Enter preferred brand (leave blank for any): ")
            min_safety_rating = float(input("Enter minimum safety rating (out of 5): "))

            buyer = CarBuyer(name, budget, min_fuel_efficiency, brand_preference, min_safety_rating)
            buyer.recommend_car(car_shop)

            model_to_buy = input("\nEnter the model of the car you want to buy (or 'cancel' to go back): ")
            if model_to_buy.lower() != "cancel":
                print(car_shop.mark_car_as_sold(model_to_buy))

        elif choice == "5":
            print("Thank you for using AutoSelect Pro. Goodbye!")
            break

        else:
            print("Invalid choice. Please try again.")


if __name__ == "__main__":
    main()
